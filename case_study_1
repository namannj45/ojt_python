{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Q1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lAtc6ig3bYEc",
        "outputId": "88f5cc77-9983-4fa3-9b19-d38c74ff616f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2002,2009,2016,2023,2037,2044,2051,2058,2072,2079,2086,2093,2107,2114,2121,2128,2142,2149,2156,2163,2177,2184,2191,2198,2212,2219,2226,2233,2247,2254,2261,2268,2282,2289,2296,2303,2317,2324,2331,2338,2352,2359,2366,2373,2387,2394,2401,2408,2422,2429,2436,2443,2457,2464,2471,2478,2492,2499,2506,2513,2527,2534,2541,2548,2562,2569,2576,2583,2597,2604,2611,2618,2632,2639,2646,2653,2667,2674,2681,2688,2702,2709,2716,2723,2737,2744,2751,2758,2772,2779,2786,2793,2807,2814,2821,2828,2842,2849,2856,2863,2877,2884,2891,2898,2912,2919,2926,2933,2947,2954,2961,2968,2982,2989,2996,3003,3017,3024,3031,3038,3052,3059,3066,3073,3087,3094,3101,3108,3122,3129,3136,3143,3157,3164,3171,3178,3192,3199,"
          ]
        }
      ],
      "source": [
        "for i in range (2000,3201):\n",
        " if(i%7==0 and i%5!=0):\n",
        "  print(i,end=',')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "x=int(input(\"enter your number\"))\n",
        "ans=1\n",
        "for i in range (1,x+1):\n",
        "  ans=ans*i\n",
        "print(ans)"
      ],
      "metadata": {
        "id": "qMhQdYwvb3Uz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4fd4673-e2f5-47ad-dba6-c271618814f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter your number8\n",
            "40320\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=int(input(\"enter number\"))\n",
        "squares = {i:i*i for i in range(1,x+1)}\n",
        "print(squares)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SjNr2r89TBT9",
        "outputId": "06ae7fd1-bdc9-4ccb-f731-716d493c0c58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter number8\n",
            "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "values = input(\"input:\")\n",
        "list=values.split(',')\n",
        "tuple = tuple(list)\n",
        "print('List:',list)\n",
        "print('Tuple:',tuple)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ClcdwSbGTBej",
        "outputId": "7e95b647-f0e1-49d7-8043-3e0ffe1ebf96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input:5,6,8,9,6\n",
            "List: ['5', '6', '8', '9', '6']\n",
            "Tuple: ('5', '6', '8', '9', '6')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class String():\n",
        "  def __init__(self):\n",
        "    self.str1=\"\"\n",
        "\n",
        "  def get_String(self):\n",
        "    self.str1=input()\n",
        "\n",
        "  def print_String(self):\n",
        "    print(self.str1.upper())\n",
        "\n",
        "\n",
        "str1=String()\n",
        "str1.get_String()\n",
        "str1.print_String()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tNZDEyQpTBgc",
        "outputId": "677f3979-941e-4bff-cb91-6f117b61867c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nAman\n",
            "NAMAN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6\n",
        "import math\n",
        "\n",
        "numbers = input(\"Provide D: \")\n",
        "numbers = numbers.split(',')\n",
        "\n",
        "result_list = []\n",
        "for D in numbers:\n",
        "    Q = round(math.sqrt(2 * 50 * int(D) / 30))\n",
        "    result_list.append(Q)\n",
        "\n",
        "print(result_list)"
      ],
      "metadata": {
        "id": "4-yZP-hJTBkP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44c107cb-dfab-401c-e39c-0715afb3f4f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Provide D: 100,150,180\n",
            "[18, 22, 24]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#7\n",
        "input_str = input()\n",
        "dimensions=[int(x) for x in input_str.split(',')]\n",
        "rowNum=dimensions[0]\n",
        "colNum=dimensions[1]\n",
        "multilist = [[0 for col in range(colNum)] for row in range(rowNum)]\n",
        "\n",
        "for row in range(rowNum):\n",
        "    for col in range(colNum):\n",
        "        multilist[row][col]= row*col\n",
        "\n",
        "print(multilist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ZKWbiEc0B4d",
        "outputId": "ba2ccd6f-2013-44bb-e8e8-4d54aa3773ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3,5\n",
            "[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8\n",
        "values = input(\"input:\")\n",
        "words=values.split(',')\n",
        "words.sort()\n",
        "for word in words:\n",
        "   print(word,end=',')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FjguorlJ0CBz",
        "outputId": "6b589aa7-a5a6-4164-e507-1ae42f10be1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input:nmn,jain,as\n",
            "as,jain,nmn,"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9\n",
        "values = input(\"input:\")\n",
        "values=values.upper()\n",
        "print(values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MVtcrURB0CFB",
        "outputId": "a0037f15-d287-40a2-b42d-7387ae1134f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input:namna jain\n",
            "NAMNA JAIN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#10\n",
        "phrase = input(\"Type in: \")\n",
        "phrase_splited = phrase.split(' ')\n",
        "\n",
        "word_list = []\n",
        "for i in phrase_splited:\n",
        "    if i not in word_list:\n",
        "        word_list.append(i)\n",
        "    else:\n",
        "        continue\n",
        "word_list.sort()\n",
        "print((' ').join(word_list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8JbJ4jef0CIE",
        "outputId": "4b280d0e-02ab-404b-94b4-e851d49929db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type in: hello world again naman jain \n",
            " again hello jain naman world\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#11\n",
        "value = []\n",
        "items=[x for x in input().split(',')]\n",
        "for p in items:\n",
        "    intp = int(p, 2)\n",
        "    if not intp%5:\n",
        "        value.append(p)\n",
        "\n",
        "print(value,end=',')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CIRQo2zV0CKq",
        "outputId": "e96d221c-5c85-47c1-a4a0-1e572d2478cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0100,0011,1010,1001\n",
            "['1010'],"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#12\n",
        "\n",
        "for x in range(1000,3001):\n",
        "  if x%2==0:\n",
        "     print(x,end=\",\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HpsvmmZ2QkmY",
        "outputId": "aeeaa76e-1f99-422d-fbb3-1608409f8bb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,1498,1500,1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,1582,1584,1586,1588,1590,1592,1594,1596,1598,1600,1602,1604,1606,1608,1610,1612,1614,1616,1618,1620,1622,1624,1626,1628,1630,1632,1634,1636,1638,1640,1642,1644,1646,1648,1650,1652,1654,1656,1658,1660,1662,1664,1666,1668,1670,1672,1674,1676,1678,1680,1682,1684,1686,1688,1690,1692,1694,1696,1698,1700,1702,1704,1706,1708,1710,1712,1714,1716,1718,1720,1722,1724,1726,1728,1730,1732,1734,1736,1738,1740,1742,1744,1746,1748,1750,1752,1754,1756,1758,1760,1762,1764,1766,1768,1770,1772,1774,1776,1778,1780,1782,1784,1786,1788,1790,1792,1794,1796,1798,1800,1802,1804,1806,1808,1810,1812,1814,1816,1818,1820,1822,1824,1826,1828,1830,1832,1834,1836,1838,1840,1842,1844,1846,1848,1850,1852,1854,1856,1858,1860,1862,1864,1866,1868,1870,1872,1874,1876,1878,1880,1882,1884,1886,1888,1890,1892,1894,1896,1898,1900,1902,1904,1906,1908,1910,1912,1914,1916,1918,1920,1922,1924,1926,1928,1930,1932,1934,1936,1938,1940,1942,1944,1946,1948,1950,1952,1954,1956,1958,1960,1962,1964,1966,1968,1970,1972,1974,1976,1978,1980,1982,1984,1986,1988,1990,1992,1994,1996,1998,2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020,2022,2024,2026,2028,2030,2032,2034,2036,2038,2040,2042,2044,2046,2048,2050,2052,2054,2056,2058,2060,2062,2064,2066,2068,2070,2072,2074,2076,2078,2080,2082,2084,2086,2088,2090,2092,2094,2096,2098,2100,2102,2104,2106,2108,2110,2112,2114,2116,2118,2120,2122,2124,2126,2128,2130,2132,2134,2136,2138,2140,2142,2144,2146,2148,2150,2152,2154,2156,2158,2160,2162,2164,2166,2168,2170,2172,2174,2176,2178,2180,2182,2184,2186,2188,2190,2192,2194,2196,2198,2200,2202,2204,2206,2208,2210,2212,2214,2216,2218,2220,2222,2224,2226,2228,2230,2232,2234,2236,2238,2240,2242,2244,2246,2248,2250,2252,2254,2256,2258,2260,2262,2264,2266,2268,2270,2272,2274,2276,2278,2280,2282,2284,2286,2288,2290,2292,2294,2296,2298,2300,2302,2304,2306,2308,2310,2312,2314,2316,2318,2320,2322,2324,2326,2328,2330,2332,2334,2336,2338,2340,2342,2344,2346,2348,2350,2352,2354,2356,2358,2360,2362,2364,2366,2368,2370,2372,2374,2376,2378,2380,2382,2384,2386,2388,2390,2392,2394,2396,2398,2400,2402,2404,2406,2408,2410,2412,2414,2416,2418,2420,2422,2424,2426,2428,2430,2432,2434,2436,2438,2440,2442,2444,2446,2448,2450,2452,2454,2456,2458,2460,2462,2464,2466,2468,2470,2472,2474,2476,2478,2480,2482,2484,2486,2488,2490,2492,2494,2496,2498,2500,2502,2504,2506,2508,2510,2512,2514,2516,2518,2520,2522,2524,2526,2528,2530,2532,2534,2536,2538,2540,2542,2544,2546,2548,2550,2552,2554,2556,2558,2560,2562,2564,2566,2568,2570,2572,2574,2576,2578,2580,2582,2584,2586,2588,2590,2592,2594,2596,2598,2600,2602,2604,2606,2608,2610,2612,2614,2616,2618,2620,2622,2624,2626,2628,2630,2632,2634,2636,2638,2640,2642,2644,2646,2648,2650,2652,2654,2656,2658,2660,2662,2664,2666,2668,2670,2672,2674,2676,2678,2680,2682,2684,2686,2688,2690,2692,2694,2696,2698,2700,2702,2704,2706,2708,2710,2712,2714,2716,2718,2720,2722,2724,2726,2728,2730,2732,2734,2736,2738,2740,2742,2744,2746,2748,2750,2752,2754,2756,2758,2760,2762,2764,2766,2768,2770,2772,2774,2776,2778,2780,2782,2784,2786,2788,2790,2792,2794,2796,2798,2800,2802,2804,2806,2808,2810,2812,2814,2816,2818,2820,2822,2824,2826,2828,2830,2832,2834,2836,2838,2840,2842,2844,2846,2848,2850,2852,2854,2856,2858,2860,2862,2864,2866,2868,2870,2872,2874,2876,2878,2880,2882,2884,2886,2888,2890,2892,2894,2896,2898,2900,2902,2904,2906,2908,2910,2912,2914,2916,2918,2920,2922,2924,2926,2928,2930,2932,2934,2936,2938,2940,2942,2944,2946,2948,2950,2952,2954,2956,2958,2960,2962,2964,2966,2968,2970,2972,2974,2976,2978,2980,2982,2984,2986,2988,2990,2992,2994,2996,2998,3000,"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "3pNnZjzLQk_R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#13\n",
        "s = input(\"Input a string\")\n",
        "d=l=0\n",
        "for c in s:\n",
        "    if c.isdigit():\n",
        "        d=d+1\n",
        "    elif c.isalpha():\n",
        "        l=l+1\n",
        "    else:\n",
        "        pass\n",
        "print(\"Letters\", l)\n",
        "print(\"Digits\", d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kY5i3ZgeQluA",
        "outputId": "68a13a18-b08b-405b-f1fb-8e8361fbe7e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input a stringnaman jain 1234\n",
            "Letters 9\n",
            "Digits 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#14\n",
        "def string_test(s):\n",
        "    d={\"UPPER_CASE\":0, \"LOWER_CASE\":0}\n",
        "    for c in s:\n",
        "        if c.isupper():\n",
        "           d[\"UPPER_CASE\"]+=1\n",
        "        elif c.islower():\n",
        "           d[\"LOWER_CASE\"]+=1\n",
        "        else:\n",
        "           pass\n",
        "    \n",
        "    print (\" Upper case  : \", d[\"UPPER_CASE\"])\n",
        "    print (\" Lower case  : \", d[\"LOWER_CASE\"])\n",
        "\n",
        "string_test('Hwllo world')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Fz6z0j3QcPV",
        "outputId": "8cdcb969-f8c3-4a56-cd69-5af56b16a488"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Upper case  :  1\n",
            " Lower case  :  9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#15\n",
        "value = input(\"Enter value: \")\n",
        "\n",
        "n1 = value * 1\n",
        "n2 = value * 2\n",
        "n3 = value * 3\n",
        "n4 = value * 4\n",
        "\n",
        "total = int(n1) + int(n2) + int(n3) + int(n4)\n",
        "print(total)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6X5AD9oPQcZ1",
        "outputId": "4d9d3cad-8df8-46dc-e57e-eaec34cd5047"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter value: 2\n",
            "22\n",
            "2468\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#16\n",
        "numbers = input(\"Type in: \")\n",
        "#numbers = numbers.split(',')\n",
        "\n",
        "odd_list = [i for i in numbers.split(',') if (int(i) % 2 != 0)]\n",
        "print((\",\").join(odd_list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6PxTBVoUQcc4",
        "outputId": "1d47d9e6-eb00-4ca3-bfca-3b05a08a4c2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type in: 1,23,5,9,2\n",
            "1,23,5,9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#17\n",
        "total = 0\n",
        "while True:\n",
        "    d_w_trans = input()\n",
        "    if d_w_trans == \"\":\n",
        "        break\n",
        "    else:\n",
        "        d_w_trans = d_w_trans.split(\" \")\n",
        "        if d_w_trans[0] == \"D\":\n",
        "            total = total + int(d_w_trans[1])\n",
        "        elif d_w_trans[0] == \"W\":\n",
        "            total = total - int(d_w_trans[1])\n",
        "\n",
        "print(total)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QS4wm-F2QcfW",
        "outputId": "228046ae-ae67-480d-a833-11fcd6102669"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "D 200\n",
            "D 200\n",
            "W 100\n",
            "\n",
            "300\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#18\n",
        "import re\n",
        "\n",
        "passwords = input(\"Type in: \")\n",
        "passwords = passwords.split(\",\")\n",
        "\n",
        "accepted_pass = []\n",
        "for i in passwords:\n",
        "    \n",
        "    if len(i) < 6 or len(i) > 12:\n",
        "        continue\n",
        "\n",
        "    elif not re.search(\"([a-z])+\", i):\n",
        "        continue\n",
        "\n",
        "    elif not re.search(\"([A-Z])+\", i):\n",
        "        continue\n",
        "\n",
        "    elif not re.search(\"([0-9])+\", i):\n",
        "        continue\n",
        "\n",
        "    elif not re.search(\"([#@$])+\", i):\n",
        "        continue\n",
        "\n",
        "    else:\n",
        "        accepted_pass.append(i)\n",
        "\n",
        "print((\" \").join(accepted_pass))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EUDlyC1aQch1",
        "outputId": "6b9ac530-ab8c-47dc-c4d0-437474b45564"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type in: ABd1234@1,a F1#,2w3E*,2We3345\n",
            "ABd1234@1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "yi26hUU9V8o2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#20\n",
        "n = int(input())\n",
        "divBy7 = [i for i in range(0, n) if (i % 7 == 0)]\n",
        "print(divBy7)\n",
        "\n",
        "def divChecker(n):\n",
        "    for i in range(n):\n",
        "        if i % 7 == 0:\n",
        "            value = True\n",
        "        else:\n",
        "            value = False\n",
        "        print(i, value)\n",
        "\n",
        "divChecker(n)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uvBQBTr8V8rX",
        "outputId": "395fd0e5-1be1-4453-fca8-b71605f9bc22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25\n",
            "[0, 7, 14, 21]\n",
            "0 True\n",
            "1 False\n",
            "2 False\n",
            "3 False\n",
            "4 False\n",
            "5 False\n",
            "6 False\n",
            "7 True\n",
            "8 False\n",
            "9 False\n",
            "10 False\n",
            "11 False\n",
            "12 False\n",
            "13 False\n",
            "14 True\n",
            "15 False\n",
            "16 False\n",
            "17 False\n",
            "18 False\n",
            "19 False\n",
            "20 False\n",
            "21 True\n",
            "22 False\n",
            "23 False\n",
            "24 False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#21\n",
        "import math\n",
        "\n",
        "x, y = 0, 0\n",
        "\n",
        "while True:\n",
        "    step = input(\"Type in UP/DOWN/LEFT/RIGHT #step number: \")\n",
        "\n",
        "    if step == \"\":\n",
        "        break\n",
        "\n",
        "    else:\n",
        "        step = step.split(\" \")\n",
        "\n",
        "        if step[0] == \"UP\":\n",
        "            y = y + int(step[1])\n",
        "        elif step[0] == \"DOWN\":\n",
        "            y = y - int(step[1])\n",
        "        elif step[0] == \"LEFT\":\n",
        "            x = x - int(step[1])\n",
        "        elif step[0] == \"RIGHT\":\n",
        "            x = x + int(step[1])\n",
        "\n",
        "c = math.sqrt(x**2 + y**2)\n",
        "\n",
        "print(\"Distance:\", c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADDJNAUSV8vm",
        "outputId": "779cf965-1121-4b4e-ba94-b13796234e0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type in UP/DOWN/LEFT/RIGHT #step number: UP 5\n",
            "Type in UP/DOWN/LEFT/RIGHT #step number: \n",
            "Distance: 5.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#22\n",
        "\n",
        "text_line = input(\"Type in: \")\n",
        "\n",
        "freq_dict = {}\n",
        "\n",
        "for i in text_line.split(' '):\n",
        "    if i.isalpha():\n",
        "        if i not in freq_dict:\n",
        "            freq_dict[i] = 1\n",
        "        elif i in freq_dict:\n",
        "            freq_dict[i] = freq_dict[i] + 1\n",
        "\n",
        "    elif i.isnumeric():\n",
        "          if i not in freq_dict:\n",
        "             freq_dict[i] = 1\n",
        "          elif i in freq_dict:\n",
        "             freq_dict[i] = freq_dict[i] + 1\n",
        "    else :        \n",
        "        pass\n",
        "\n",
        "sorted_freq_dict = sorted(freq_dict.items())\n",
        "\n",
        "for i in sorted_freq_dict:\n",
        "    print(i[0], i[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ObGmdGLjZXT_",
        "outputId": "f52775b2-31bf-459c-9c9e-eb31ee127c0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type in:  New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3\n",
            "2 2\n",
            "3 1\n",
            "New 1\n",
            "Python 5\n",
            "Read 1\n",
            "and 1\n",
            "between 1\n",
            "choosing 1\n",
            "or 2\n",
            "to 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#23\n",
        "n = 4\n",
        " \n",
        "square = n ** 2\n",
        " \n",
        "print(square)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lojA06cTZXWX",
        "outputId": "4b935565-7083-4a4c-e2cc-e6525c409d0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#24\n",
        "def absolute(number):\n",
        "      return abs(number)\n",
        "\n",
        "print (absolute(int(input('Enter Number :'))))\n",
        "\n",
        "print (abs.__doc__)\n",
        "print (int.__doc__)\n",
        "print (input.__doc__)"
      ],
      "metadata": {
        "id": "YvIBn7tpZXYc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20ee0841-ee97-4e6f-b894-6f4481ec84d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Number :1\n",
            "1\n",
            "Return the absolute value of the argument.\n",
            "int([x]) -> integer\n",
            "int(x, base=10) -> integer\n",
            "\n",
            "Convert a number or string to an integer, or return 0 if no arguments\n",
            "are given.  If x is a number, return x.__int__().  For floating point\n",
            "numbers, this truncates towards zero.\n",
            "\n",
            "If x is not a number or if base is given, then x must be a string,\n",
            "bytes, or bytearray instance representing an integer literal in the\n",
            "given base.  The literal can be preceded by '+' or '-' and be surrounded\n",
            "by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n",
            "Base 0 means to interpret the base from the string as an integer literal.\n",
            ">>> int('0b100', base=0)\n",
            "4\n",
            "Forward raw_input to frontends\n",
            "\n",
            "        Raises\n",
            "        ------\n",
            "        StdinNotImplentedError if active frontend doesn't support stdin.\n",
            "        \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#25\n",
        "class demo:\n",
        "    \n",
        "    def __init__(self):\n",
        "       self.x=0\n",
        "       self.y=0\n",
        "\n",
        "p= demo()\n",
        "q= demo()\n",
        "\n",
        "print(p.x)\n",
        "print(p.y)\n",
        "\n"
      ],
      "metadata": {
        "id": "w4m5E-8ZZXcs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe4f632b-3de7-4ba6-a07d-39918c3ecb2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#26\n",
        "def sum(x,y):\n",
        "    return x+y\n",
        "\n",
        "a= int(input(\"Enter first number:\"))\n",
        "b= int(input(\"Enter second number:\"))\n",
        "\n",
        "print(\"Sum of the given two numbers is: \", sum(a,b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "siHSO7O_V8yN",
        "outputId": "b525e927-8999-4d2e-86e3-81ee3651d526"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter first number:5\n",
            "Enter second number:6\n",
            "Sum of the given two numbers is:  11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#27\n",
        "def printValue(n):\n",
        "\t print (str(n))\n",
        "\n",
        "printValue(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sM4fGkKBYWr1",
        "outputId": "b7ffa623-3c59-4098-e82d-32ef0bbfdbb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#28\n",
        "def printValue(n):\n",
        "\t print (str(n))\n",
        "\n",
        "printValue(120)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWO_IhbIYW5m",
        "outputId": "98846711-40f2-4abd-a211-f9cf1e4f784a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#29\n",
        "def printValue(s1,s2):\n",
        "\tprint (int(s1) + int(s2))\n",
        "printValue(\"20\",\"10\") "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1OYU2S-jYW8C",
        "outputId": "b127a3b9-4c58-42e3-abec-04a07f7c24c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#30\n",
        "def concate(c1,c2):\n",
        "  print(c1+c2)\n",
        "\n",
        "concate(\"naman\",\"jain\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n1-OOu2FYW-J",
        "outputId": "dd39bbbd-432c-48aa-b0c1-ca5a38707f15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "namanjain\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#31\n",
        "def printvalue(s1,s2):\n",
        "\tlen1 = len(s1)\n",
        "\tlen2 = len(s2)\n",
        "\tif len1 > len2:\n",
        "\t   \tprint (s1)\n",
        "\telif len2 > len1:\n",
        "\t   \tprint (s2)\n",
        "\telse:\n",
        "\t  \tprint (s1)\n",
        "\t  \tprint (s2)\n",
        "\n",
        "s1=input()\n",
        "s2=input()\n",
        "printvalue(s1,s2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rhm1BB5kYXAw",
        "outputId": "a1caa598-2101-44c1-d88c-ac79dac13e7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "zcssa\n",
            "n\n",
            "zcssa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#32\n",
        "\n",
        "num = int(input(\"Enter a number: \"))\n",
        "if (num % 2) == 0:\n",
        "   print(\"It is an Even\")\n",
        "else:\n",
        "   print(\"it  is an Odd\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uRr5bnEdYXEb",
        "outputId": "08bcb11b-8637-4072-94a7-f6a0d38a35ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 89\n",
            "it  is an Odd\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#33\n",
        "def printDict():\n",
        "    dict={i:i**2 for i in range(1,21)}   \n",
        "    print(dict)\n",
        "\n",
        "printDict()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7iyWF8t00m1j",
        "outputId": "ee54605e-2efa-4dc1-fac8-16233c67dac3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#34\n",
        "def printDict():\n",
        "    dict={i:i**2 for i in range(1,21)}   \n",
        "   print(dict)\n",
        "\n",
        "printDict()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "AfiZqyF50m3A",
        "outputId": "3a9b269f-76e8-425a-ad8e-7b93e8e7d779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-41-ab9f557e79aa>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    print(dict)\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#35\n",
        "def printDict():\n",
        "    dict={i:i**2 for i in range(1,21)}   \n",
        "    return dict.values()\n",
        "\n",
        "printDict()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VcdlDeg80m49",
        "outputId": "97781f24-dc1d-4bd8-c446-73c9ba89dace"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_values([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#36\n",
        "def printDict():\n",
        "    dict={i:i**2 for i in range(1,21)}   \n",
        "    return dict.keys()\n",
        "\n",
        "printDict()"
      ],
      "metadata": {
        "id": "MS5Nf76k0m7E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#37\n",
        "def printlist():\n",
        "    list={i:i**2 for i in range(1,21)}   \n",
        "    print(list)\n",
        "\n",
        "printlist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KjOEHwH60m9F",
        "outputId": "024b3ed4-c75e-4bff-f095-6a3b6752a71b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#38\n",
        "def printList():\n",
        "    lst = [i ** 2 for i in range(1, 21)]\n",
        "\n",
        "    for i in range(5):\n",
        "        print(lst[i])\n",
        "\n",
        "printList()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZRbL4tt0nA2",
        "outputId": "9cc96bda-33d1-40d1-cc22-693ca4960f6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "4\n",
            "9\n",
            "16\n",
            "25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#39\n",
        "def printList():\n",
        "\tli=list()\n",
        "\tfor i in range(1,21):\n",
        "\t\tli.append(i**2)\n",
        "\tprint (li[15:])\n",
        "\n",
        "printList()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQeiWnWq0nGm",
        "outputId": "2bce1ae1-d37c-4842-9d83-456f809ed1fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[256, 289, 324, 361, 400]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#40\n",
        "def printList():\n",
        "\tli=list()\n",
        "\tfor i in range(1,21):\n",
        "\t\tli.append(i**2)\n",
        "\tprint (li[6:])\n",
        "\n",
        "printList()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qKjcgU4k0nKB",
        "outputId": "69f4551f-51db-4b6e-a5ce-bc53648a046c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#41\n",
        "def printList():\n",
        "\tli=list()\n",
        "\tfor i in range(1,21):\n",
        "\t\tli.append(i**2)\n",
        "\tprint (tuple(li))\n",
        "\n",
        "printList()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XdNNj5hF0nMO",
        "outputId": "a2f44efc-3529-483f-8c25-09b1cc790e98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#42\n",
        "tup=tuple(x+1 for x in range(10))\n",
        "print(tup[:5])\n",
        "print(tup[5:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2KlRnJRp0nPT",
        "outputId": "89b982d4-4c6c-4e28-b5d2-ee3c2d079ffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3, 4, 5)\n",
            "(6, 7, 8, 9, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#43\n",
        "tup1=tuple()\n",
        "tup=tuple(x+1 for x in range(10))\n",
        "for i in tup:\n",
        "   if i%2==0:\n",
        "      tup1+=(i,)\n",
        "\n",
        "print(tup1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yzxD09ZMFQce",
        "outputId": "7f9f9a83-c215-42e6-e4ae-7dd767771005"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 4, 6, 8, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#44\n",
        "string=input()\n",
        "if string=='yes' or string=='Yes' or string=='YES':\n",
        "    print('Yes')\n",
        "else:\n",
        "    print('No')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mcen5GfaFQey",
        "outputId": "0ba52e26-e888-47cb-abfb-ca22aa34e335"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "m\n",
            "No\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#45\n",
        "seq=[i+1 for i in range(10)]\n",
        "result = list(filter(lambda x: x % 2 == 0, seq))\n",
        "result"
      ],
      "metadata": {
        "id": "6Nj4DKt-FQic",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70b58a10-cda9-4971-ee98-bff0e20da7f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 4, 6, 8, 10]"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#46\n",
        "nums=[i+1 for i in range(10)]\n",
        "result = list(map(lambda x:x**2, nums))\n",
        "\n",
        "print(result)"
      ],
      "metadata": {
        "id": "y5KpJZPnFQls",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4dbc85c0-8a58-4b4b-8645-580c056b7d59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#47\n",
        "nums=[i+1 for i in range(10)]\n",
        "result = list(map(lambda x:x**2, filter(lambda x:x%2==0,seq)))\n",
        "\n",
        "result\n"
      ],
      "metadata": {
        "id": "XbPk0bBoFQnm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f14a4a5-fe4b-4d9f-dd62-4ab629e003e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[4, 16, 36, 64, 100]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#48\n",
        "seq=[i+1 for i in range(20)]\n",
        "result = list(filter(lambda x: x % 2 == 0, seq))\n",
        "result"
      ],
      "metadata": {
        "id": "MJ9U1Lp2FQpM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0da7035e-9513-4feb-be79-f0671c94101b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#49\n",
        "nums=[i+1 for i in range(20)]\n",
        "result = list(map(lambda x:x**2, nums))\n",
        "\n",
        "print(result)"
      ],
      "metadata": {
        "id": "WaQ1ydRbFQtg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8843950-8a52-4211-be99-dd23440d36bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#50 #51\n",
        "class American():\n",
        "   pass\n",
        "\n",
        "   @staticmethod\n",
        "   def printNationality():\n",
        "      print('American')\n",
        "\n",
        "class NewYorker(American):\n",
        "  pass\n",
        "\n",
        "obj=American()\n",
        "obj.printNationality()\n",
        "obj=NewYorker()\n",
        "obj.printNationality()"
      ],
      "metadata": {
        "id": "7wIYCW-5FQwd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1751f5b4-3ea4-41d0-e2bb-d776ead81a52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "American\n",
            "American\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#52\n",
        "\n",
        "class circle():\n",
        "    def __init__(self, r):\n",
        "        self.radius=r\n",
        "    def area(self):\n",
        "        return 3.1415*self.radius*self.radius\n",
        "c=circle(1)\n",
        "c.area()"
      ],
      "metadata": {
        "id": "ArQVvnug-SHZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#53\n",
        "class Rectangle(object):\n",
        "    def __init__(self, l, w):\n",
        "        self.length = l\n",
        "        self.width  = w\n",
        "\n",
        "    def area(self):\n",
        "        return self.length*self.width\n",
        "\n",
        "aRectangle = Rectangle(2,15)\n",
        "print(aRectangle.area())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vKsc4Wmc-SJK",
        "outputId": "c4241d3f-7e3f-4b98-ae47-a4e88316d87f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#54\n",
        "class Shape(object):\n",
        "    def __init__(self):\n",
        "        pass\n",
        "\n",
        "    def area(self):\n",
        "        return 0\n",
        "\n",
        "class Square(Shape):\n",
        "    def __init__(self, l):\n",
        "        self.length = l\n",
        "\n",
        "    def area(self):\n",
        "        return self.length*self.length\n",
        "\n",
        "aSquare= Square(3)\n",
        "print (aSquare.area())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JIs83-Q-SLD",
        "outputId": "ce618e35-07d4-4861-e397-cfd5243a8cfe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#55\n",
        "def check():\n",
        "  return 5/0\n",
        "try:\n",
        "  check()\n",
        "  print(\"check1\")\n",
        "except:\n",
        "    print(\"Divisiblity error\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ex3lfzxu-SNO",
        "outputId": "96fcaf33-875e-46f6-8097-4fba7e325214"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Divisiblity error\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#56\n",
        "class MyError(Exception):\n",
        "   \n",
        "\n",
        "    def __init__(self, msg):\n",
        "        self.msg = msg\n",
        "\n",
        "error = MyError(\"something wrong\")\n"
      ],
      "metadata": {
        "id": "fCNUmiX_-SRE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#57\n",
        "email = \"nmnjain@gmail.com\"\n",
        "email = email.split('@')\n",
        "print(email[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nfox5IsTVoOh",
        "outputId": "dbc570ca-5561-48ae-cb3a-398018862d1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nmnjain\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#58\n",
        "st=\"Chandra@analytixlabs.com\"\n",
        "name=st.split('@')[1]\n",
        "name=name.split('.')[0]\n",
        "name"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "MjAGqAGOVoYq",
        "outputId": "65150670-59f5-478f-f920-e5fcb2110f86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'analytixlabs'"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#59\n",
        "s=input()\n",
        "res=[]\n",
        "sen=s.split(' ')\n",
        "for word in sen:\n",
        "    if word.isdigit():\n",
        "        res.append(word)\n",
        "        \n",
        "res"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "56cEYfT0Voc2",
        "outputId": "2c6c89cc-8b2e-46d8-84df-a501c762e5ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2aascas as 3\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['3']"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#60\n",
        "print(u'Hello, world!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "odsDkpLjVogq",
        "outputId": "e1d2c4d2-48a8-45d6-92aa-34eddbf0163d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#61\n",
        "\n",
        "x='String'\n",
        "x=x.encode('utf-8')\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-yaQRaVnVopG",
        "outputId": "fd7b440e-498d-400e-ea30-2dac7e43fa0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "b'String'"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#62\n",
        "# -*- coding: utf-8 -*-"
      ],
      "metadata": {
        "id": "fELgNApmbMD8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#63\n",
        "n=int(input())\n",
        "sum=0.0\n",
        "for i in range(1,n+1):\n",
        "    sum += float(float(i)/(i+1))\n",
        "print(round(sum, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-i5eK3LKbMGS",
        "outputId": "39f31f9a-1ee1-4ece-cbfc-c1601dfec171"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "3.55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#64\n",
        "\n",
        "def func(n):\n",
        "    if n==0:\n",
        "        return 0\n",
        "    return func(n-1)+100\n",
        "\n",
        "n=int(input())\n",
        "if n==0:\n",
        "    print(\"Invalid\")\n",
        "    exit()\n",
        "func(n)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J6AuijfFbMIw",
        "outputId": "ca164bd2-9004-46bf-f638-aca50e7d34db"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "5\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "500"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#65\n",
        "\n",
        "def Fibonacci(n):\n",
        "    if n == 0:\n",
        "        return 0\n",
        "    \n",
        "    elif n == 1:\n",
        "        return 1\n",
        "    \n",
        "    else:\n",
        "        return Fibonacci(n-1) + Fibonacci(n-2)\n",
        "\n",
        "Fibonacci(7)  \n"
      ],
      "metadata": {
        "id": "fDJQ-8pabMQZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#66\n",
        "def f(n):\n",
        "    if n == 0: return 0\n",
        "    elif n == 1: return 1\n",
        "    else: return f(n-1)+f(n-2)\n",
        "\n",
        "n=int(input())\n",
        "values = [str(f(x)) for x in range(0, n+1)]\n",
        "print(values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UmeEGUVxbMS5",
        "outputId": "edd6e032-1138-47e9-9333-1643a8ceb206"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n",
            "['0', '1', '1', '2', '3', '5', '8', '13']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#67\n",
        "def func(i):\n",
        "    yield i\n",
        "n=int(input())\n",
        "for i in range(0,n+1,2):\n",
        "    print(next(func(i)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ATrwoNvfbMVS",
        "outputId": "3e02d8b8-32c6-464f-926d-4a34520dff64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "0\n",
            "2\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#68\n",
        "\n",
        "def func(i):\n",
        "    yield i\n",
        "n=int(input())\n",
        "for i in range(0,n+1):\n",
        "    if i%7==0 and i%5==0:\n",
        "        print(next(func(i)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "27OCf8vibMWw",
        "outputId": "b09cdf0a-e1eb-4e1c-eede-63a9d76bdd68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "70\n",
            "0\n",
            "35\n",
            "70\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#69\n",
        "l=[2,4,6,8]\n",
        "for i in l:\n",
        "    assert i%2==0"
      ],
      "metadata": {
        "id": "33SRsd0XmfNN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#70\n",
        "expression = input()\n",
        "ans = eval(expression)\n",
        "print(ans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5bcu6BvamfPl",
        "outputId": "e2aafa81-3ffb-4a45-dac3-c51002811312"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35+6\n",
            "41\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#71   #72\n",
        "\n",
        "arr = [ 2, 3, 4, 10, 40 ]\n",
        "x = 4\n",
        "\n",
        "low = 0\n",
        "high = len(arr) - 1\n",
        "mid = 0\n",
        "\n",
        "while low <= high:\n",
        "\n",
        "    mid = (high + low) // 2\n",
        "\n",
        "    # If x is greater, ignore left half\n",
        "    if arr[mid] < x:\n",
        "        low = mid + 1\n",
        "\n",
        "    # If x is smaller, ignore right half\n",
        "    elif arr[mid] > x:\n",
        "        high = mid - 1\n",
        "\n",
        "    # means x is present at mid\n",
        "    else:\n",
        "        print(mid)\n",
        "        break\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pUp2w79KmfSs",
        "outputId": "94158575-187a-4848-bb8c-c63d0f9a6c58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#73\n",
        "import random\n",
        "rand_num = random.uniform(10,100)\n",
        "print(rand_num)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ojq4WFUJoa7k",
        "outputId": "2e5fb5d2-34c2-491f-8fe4-f50236e09c6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "84.12998918367562\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#74\n",
        "import random\n",
        "rand_num = random.uniform(5,95)\n",
        "print(rand_num)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tqBvh3R6obFp",
        "outputId": "2e837af6-6c1d-41a7-cffa-5f1d419cb554"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "29.360653885483895\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#75\n",
        "import random\n",
        "resp = [i for i in range(0,11,2)]\n",
        "print(random.choice(resp))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ociYIbyTobKp",
        "outputId": "bd434eeb-b40d-4a4a-ee51-d4f4eca82b63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#76\n",
        "import random\n",
        "resp = [i for i in range(10,151) if i % 35 == 0 ]\n",
        "print(random.choice(resp))"
      ],
      "metadata": {
        "id": "qsbqbGEXqCj1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65022e18-1136-4d8e-bee2-b024408ec0ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "140\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#77\n",
        "import random\n",
        "resp = random.sample(range(100,201),5)\n",
        "print(resp)"
      ],
      "metadata": {
        "id": "3T93VvGpqCmy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0ef7c30-ebed-4106-a8a6-afba52a0d812"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[138, 113, 194, 161, 102]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#78\n",
        "import random\n",
        "resp = random.sample(range(100,201,2),5)\n",
        "print(resp)"
      ],
      "metadata": {
        "id": "PTehc9RZqCps",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d415bf21-3a55-468c-914d-8af38cbadb27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[132, 112, 196, 134, 110]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#79\n",
        "import random\n",
        "print (random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5))"
      ],
      "metadata": {
        "id": "ucB_-Ee5qCr-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ee81074-eca5-49a5-8efa-f6f2744eb311"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[875, 595, 35, 525, 140]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#80\n",
        "random.randrange(7,16)"
      ],
      "metadata": {
        "id": "kKxraXhfTySG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#81\n",
        "import zlib\n",
        "s = \"hello world!hello world!hello world!hello world!\"\n",
        "s=s.encode('utf-8')\n",
        "t = zlib.compress(s)\n",
        "print (t)\n",
        "print (zlib.decompress(t))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6kyE0y7eTyUp",
        "outputId": "cd68e499-4796-4264-bd5a-170e096e2ae3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b'x\\x9c\\xcbH\\xcd\\xc9\\xc9W(\\xcf/\\xcaIQ\\xcc \\x82\\r\\x00\\xbd[\\x11\\xf5'\n",
            "b'hello world!hello world!hello world!hello world!'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#82\n",
        "import timeit\n",
        "\n",
        "mycode=\"1+1\"\n",
        "print(timeit.timeit(stmt = mycode,number = 100))"
      ],
      "metadata": {
        "id": "WB5M7Vf1TyX2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#83  #84\n",
        "\n",
        "lis=[3,6,7,8]\n",
        "random.shuffle(lis)\n",
        "lis"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4hYJZ4dlTyZx",
        "outputId": "85c1ce28-ca30-4dc9-d43d-9dc43db2adeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8, 3, 7, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#85\n",
        "\n",
        "import itertools\n",
        "sen=[['I','You'],['Play','Love'],['Hockey','Football']]\n",
        "list(itertools.product(*sen))\n"
      ],
      "metadata": {
        "id": "qNfTkzKGTyeX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#86\n",
        "\n",
        "lis=[5,6,77,45,22,12,24]\n",
        "lis=[i for i in lis if i%2]\n",
        "lis"
      ],
      "metadata": {
        "id": "OfAgg_WETyhc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#87\n",
        "lis= [12,24,35,70,88,120,155]\n",
        "lis=[i for i in lis if (i%5==0 and i%7==0)]"
      ],
      "metadata": {
        "id": "eFPWkYa8Tyjt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#88\n",
        "\n",
        "lis=[12,24,35,70,88,120,155]\n",
        "lis=[lis[i] for i in range(1,len(lis),2)]\n",
        "lis"
      ],
      "metadata": {
        "id": "zfZDEfsLTylq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#89\n",
        "array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]\n",
        "print (array)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lQ4esowMTyop",
        "outputId": "834038fe-b8bf-4e1c-cf17-ae3b7f4913d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#90\n",
        "\n",
        "\n",
        "lis=[12,24,35,70,88,120,155]\n",
        "lis.pop(0)  \n",
        "lis.pop(3)  \n",
        "lis.pop(3)  \n"
      ],
      "metadata": {
        "id": "-aE2rovge3Ol"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#91\n",
        "li = [12,24,35,24,88,120,155]\n",
        "li.remove(24)  \n",
        "print(li)"
      ],
      "metadata": {
        "id": "5Dh12orRe3TE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#92\n",
        "\n",
        "list1 = [1,3,6,78,35,55]\n",
        "list2 = [12,24,35,24,88,120,155]\n",
        "set1= set(list1)\n",
        "set2= set(list2)\n",
        "intersection = set1 & set2\n",
        "print(intersection)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZrqEIIv3fOzU",
        "outputId": "229a67e5-d03e-4df2-f5a2-7d517b860f62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{35}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#93\n",
        "li = [12,24,35,24,88,120,155,88,120,155]\n",
        "for i in li:\n",
        "    if li.count(i) > 1:\n",
        "        li.remove(i)\n",
        "print(li)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r3wUyoY0fO2M",
        "outputId": "d6afa397-45a5-4f32-faef-5e3072e5ff84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[12, 35, 24, 88, 120, 155]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#94\n",
        "\n",
        "class Person():\n",
        "    def getGender():\n",
        "        pass\n",
        "class Male(Person):\n",
        "    def getGender(self):\n",
        "        print(\"Male\")\n",
        "class Female(Person):\n",
        "    def getGender(self):\n",
        "        print(\"Female\")\n",
        "    \n",
        "per=Person()\n",
        "male=Male()\n",
        "male.getGender()\n",
        "fem=Female()\n",
        "fem.getGender()"
      ],
      "metadata": {
        "id": "x_nJNbXrfPCU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#95\n",
        "test=input()\n",
        "res = {}\n",
        "for keys in test:\n",
        "    res[keys] = res.get(keys, 0) + 1\n",
        "res"
      ],
      "metadata": {
        "id": "2wMJTeFxiTKE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#96\n",
        "lis=input()\n",
        "lis[::-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "id": "3uhhqYimiTND",
        "outputId": "bd3c38c7-fd25-4b0e-cba6-6b40734c6413"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "jain\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'niaj'"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#97\n",
        "\n",
        "lis=input()\n",
        "lis[::2]"
      ],
      "metadata": {
        "id": "r10fyKkJiTP4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#98\n",
        "from itertools import permutations\n",
        "lis=[1,2,3]\n",
        "print(list(permutations(lis)))"
      ],
      "metadata": {
        "id": "-6O6CvsGiTSC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#99\n",
        "legs=94\n",
        "heads=35\n",
        "if legs % 2 !=0 or heads ==0 or heads > legs:\n",
        "    print('No solution')\n",
        "else:\n",
        "    r = int((legs + (-2*heads))/2)\n",
        "    c = int(heads - r)\n",
        "    \n",
        "print(\"Rabbit\\t\", r)\n",
        "print(\"Chicken\\t\", c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ywGHcTd6iTU2",
        "outputId": "cbcf792b-1943-4b3d-c80a-47781210f3fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rabbit\t 12\n",
            "Chicken\t 23\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#100\n",
        "phonebook = {\"John\": 938477566,\"Jack\" :938377264, \"Jill\": 947662781}\n",
        "phonebook[\"Jake\"]=9462964042\n",
        "phonebook.pop(\"Jill\")\n",
        "phonebook"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CUdzAXwaiTbg",
        "outputId": "37ed7d0a-7bb5-4214-933f-745a50d537a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Jack': 938377264, 'Jake': 9462964042, 'John': 938477566}"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    }
  ]
}
